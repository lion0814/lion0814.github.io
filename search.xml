<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用git将本地文件上传到github</title>
      <link href="2021/020246230.html"/>
      <url>2021/020246230.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用git将本地文件上传到github"><a href="#使用git将本地文件上传到github" class="headerlink" title="使用git将本地文件上传到github"></a>使用git将本地文件上传到github</h1><p>git安装：下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>在需要上传的本地文件中添加 .git文件，用于git管理</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202134045676.png" alt="image-20210202134045676" style="zoom:80%;"><p>输入命令    <strong>git init</strong></p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202134229408.png" alt="image-20210202134229408" style="zoom:80%;"><p>记得勾选显示隐藏的项目</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210202152557141.png" alt="image-20210202152557141" style="zoom:80%;"><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210202134340901.png" alt="image-20210202134340901" style="zoom:80%;"><p>在github创建新仓库用于存储管理本地文件<a href="https://github.com/">https://github.com/</a></p><p>点击账号前的加号（Create New）-&gt; New repository，创建一个新仓库,名字自己定，我这里叫blog。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202143700507.png" alt="image-20210202143700507" style="zoom:67%;"><p>在git bash 中依次输入以下命令</p><p>**git add .**命令，将文件添加到仓库中，注意add和.之间有空格</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202144242873.png" alt="image-20210202144242873" style="zoom:80%;"><p><strong>git commit -m “first”</strong> 命令，双引号中的注释first可自定义修改。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202144305732.png" alt="image-20210202144305732" style="zoom:80%;"><p>**git remote add origin https://**自己的仓库url地址</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202145124042.png" alt="image-20210202145124042" style="zoom:67%;"><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202144326787.png" alt="image-20210202144326787" style="zoom:80%;"><p>因为Github账号默认的主分支从2020年10月1日起已经由master改为了main，但是Git工具默认推送的还是master分支，这就导致推送的代码在Github上面的main主分支看不到，想要看到代码还需要切换分支。所以可以使用 <strong>git checkout -b main</strong> 命令在Git工具上创建main分支并进入，下图的蓝色括号由master切换为main分支</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210202144452674.png" alt="image-20210202144452674" style="zoom:80%;"><p><strong>git push -u origin main -f</strong> 命令进行强制代码推送，推送完成后，Github项目下已经有了相应的文件，且没了README文件</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202150916594.png" alt="image-20210202150916594" style="zoom:80%;"><p>如果不加-f ,可能会因为新建仓库的时候勾选了README文件，而本地没有这个文件出现如下报错，需要先将Github上面的README 使用git pull origin main –allow-unrelated-histories（Git新版本使用命令：git pull origin main –allow-unrelated-histories，Git老版本使用命令: git pull origin main）命令pull下来，把远程分支上的提交合并到本地分支之后再推送代码。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210202150431592.png" alt="image-20210202150431592" style="zoom:80%;"><p>本地调试和修改之后的代码，需要上传到Github上面，常用的操作指令</p><p>git init    （生成.git,有的话就不需要这个命令了）</p><p>git add .</p><p>git status</p><p>git commit -m “更新了某些内容”</p><p>git remote add origin 仓库地址</p><p>git push origin master/main    （git checkout -b main 命令是在Git工具上创建main分支并进入）</p><p>如果push的过程中提示github上某些文件是本地没有的，那么需要先pull</p><p>git pull origin master（看你的分支是master还是main）</p><p>如果报错 fatal: refusing to merge unrelated histories</p><p>使用命令 git pull origin master –allow-unrelated-histories</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件之间的数据传递</title>
      <link href="2021/012858601.html"/>
      <url>2021/012858601.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件之间的数据传递"><a href="#Vue组件之间的数据传递" class="headerlink" title="Vue组件之间的数据传递"></a>Vue组件之间的数据传递</h1><p>Vue 的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据。必须使用特定的方法才能实现组件之间的数据传递。</p><p>组件中的数据存放在data属性或methods等属性里，注意组件中的data必须是一个函数，返回一个对象，对象内部保存数据。</p><p>至于为什么在组件中必须是一个函数，因为Vue让每个组件对象都返回一个新的对象，如果是同一个对象，组件在多次使用时会相互影响。</p><p>首先用 vue-cli 创建一个项目，其中 App.vue 是父组件，components 文件夹下Child.vue是子组件。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128172031366.png" alt="image-20210128172031366" style="zoom:80%;"><h3 id="一-父组件传给子组件：子组件通过props方法接收数据"><a href="#一-父组件传给子组件：子组件通过props方法接收数据" class="headerlink" title="一.父组件传给子组件：子组件通过props方法接收数据"></a>一.父组件传给子组件：子组件通过props方法接收数据</h3><p>父组件App.vue代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 让子组件绑定appMessage变量，不加<span class="token punctuation">:</span>的话，message会被当成字符串 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>child <span class="token punctuation">:</span>appMessage<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./components/Child.vue'</span>    <span class="token comment" spellcheck="true">//引入子组件</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'父组件'</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'child组件你好，我是你爸爸'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>子组件Child.vue代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>子组件接收到父组件消息：<span class="token punctuation">{</span><span class="token punctuation">{</span> appMessage <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Child"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'子组件'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//从App.vue接收appMessage</span>    props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'appMessage'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>运行结果：</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128173307922.png" alt="image-20210128173307922" style="zoom:80%;"><h3 id="二-子组件向父组件传值：通过绑定自定义事件传值"><a href="#二-子组件向父组件传值：通过绑定自定义事件传值" class="headerlink" title="二.子组件向父组件传值：通过绑定自定义事件传值"></a>二.子组件向父组件传值：通过绑定自定义事件传值</h3><p>自定义事件的流程：</p><p>在子组件中，通过$emit()来触发事件。</p><p>在父组件中，通过v-on来监听子组件事件。</p><p>子组件代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 添加点击事件，点击之后将sonMessage传给父组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"setUser"</span><span class="token operator">></span>传值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Child"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token string">'子组件'</span><span class="token punctuation">,</span>        sonMessage<span class="token punctuation">:</span><span class="token string">'爸爸，我是儿子蛋蛋'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过$emit发射事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'transfer'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sonMessage<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>父组件代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>父组件接收到的内容：<span class="token punctuation">{</span><span class="token punctuation">{</span> message <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定自定义事件transfer <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>child @transfer<span class="token operator">=</span><span class="token string">"getUser"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./components/Child.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'父组件'</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Child  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getUser</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> msg    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>运行结果：点击按钮之后</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128180902163.png" alt="image-20210128180902163" style="zoom:80%;"><h3 id="三-通过Vuex状态管理传值"><a href="#三-通过Vuex状态管理传值" class="headerlink" title="三.通过Vuex状态管理传值"></a>三.通过Vuex状态管理传值</h3><p>Vuex 是一个可以在多个组件间共享状态的插件，一般在比较大型的项目中使用</p><p>需要npm install vuex –save 安装vuex</p><p>创建store文件夹，在其中创建index.js文件</p><p>在main.js中挂载</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128190510021.png" alt="image-20210128190510021"></p><p>可以实现一个简单的计数器案例</p><p>index.js中写如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>在App.vue中使用store对象中保存的状态即可<br>通过this.$store.state.属性的方式来访问状态<br>通过this.$store.commit(‘mutation中方法’)来修改状态</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"decrement"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'decrement'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128200645833.png" alt="image-20210128200645833" style="zoom:80%;">点击加号减号可以修改count的值</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点</title>
      <link href="2021/012858568.html"/>
      <url>2021/012858568.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于Vue-js基础知识点整理"><a href="#关于Vue-js基础知识点整理" class="headerlink" title="关于Vue.js基础知识点整理"></a>关于Vue.js基础知识点整理</h1><p>vue是一个渐进式的框架，渐进式意味着可以将vue当成你应用的一部分嵌入其中，带来更丰富的交互体验，vue的核心库及其生态可以实现更多的业务逻辑。</p><h3 id="一-Vue的生命周期"><a href="#一-Vue的生命周期" class="headerlink" title="一.Vue的生命周期"></a>一.Vue的生命周期</h3><p>Vue实例有一个完整的生命周期，从开始创建、初始化数据、编译模板、挂载DOM→渲染、更新→渲染、销毁等一系列过程，这个过程就是Vue的生命周期。简单来说，就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>vue生命周期一共有八个阶段：创建前/后，载入前/后，更新前/后和销毁前/后</p><p><strong>beforeCreate</strong>（创建前） 在数据观测和初始化事件还未开始<br><strong>created</strong>（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来<br><strong>beforeMount</strong>（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br><strong>mounted</strong>（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。<br><strong>beforeUpdate</strong>（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><strong>updated</strong>（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br><strong>beforeDestroy</strong>（销毁前） 在实例销毁之前调用。实例仍然完全可用。<br><strong>destroyed</strong>（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><p>![vue生命周期](<a href="https://gitee.com/lion0814/picgo/raw/master/img/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png">https://gitee.com/lion0814/picgo/raw/master/img/vue生命周期.png</a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aaa</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aaa</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>destroy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>msg:{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//生命周期：初始化阶段 运行中阶段 销毁阶段</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#aaa"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        timer<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            destroy<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeCreate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate:刚刚new Vue()之后，这个时候，数据还没有挂载呢，只是一个空壳'</span><span class="token punctuation">)</span>                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created:这个时候已经可以使用到数据，也可以更改数据,在这里更改数据不会触发updated函数'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token operator">=</span><span class="token string">' world'</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取'</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接下来开始找实例或者组件对应的模板，编译模板为虚拟dom放入到render函数中准备渲染'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeMount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeMount：虚拟dom已经创建完成，马上就要渲染,在这里也可以更改数据，不会触发updated'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'哈哈哈哈'</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取'</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接下来开始render，渲染出真实dom'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// render:function(createElement){</span>        <span class="token comment" spellcheck="true">//     console.log('render')</span>        <span class="token comment" spellcheck="true">//     return createElement('div','hahaha')</span>        <span class="token comment" spellcheck="true">// },</span>        mounted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted：此时，组件已经出现在页面中，数据、真实dom都已经处理好了,事件都已经挂载好了'</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以在这里操作真实dom等事情...'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//    this.$options.timer = setInterval(function () {</span>        <span class="token comment" spellcheck="true">//        console.log('setInterval')</span>        <span class="token comment" spellcheck="true">//         this.msg+='!'  </span>        <span class="token comment" spellcheck="true">//    }.bind(this),500)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeUpdate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里不能更改数据，否则会陷入死循环</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate:重新渲染之前触发'</span><span class="token punctuation">)</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染'</span><span class="token punctuation">)</span>                 <span class="token punctuation">}</span><span class="token punctuation">,</span>        updated<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//这里不能更改数据，否则会陷入死循环</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updated:数据已经更改完成，dom也重新render完成'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      beforeDestroy<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeDestory:销毁前执行（$destroy方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等...'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// clearInterval(this.$options.timer)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      destroyed<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'destroyed:组件的数据绑定、监听...都去掉了,只剩下dom空壳，这里也可以善后'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>问：第一次页面加载会触发哪几个钩子？</p><p>答：会触发beforeCreate, created, beforeMount, mounted 。</p><p>问：DOM渲染在哪个周期中就已经完成了？</p><p>答：在mounted中已经完成</p><h3 id="二-对MVVM的理解"><a href="#二-对MVVM的理解" class="headerlink" title="二.对MVVM的理解"></a>二.对MVVM的理解</h3><p>MVVM是Model-View-ViewModel的缩写</p><p>Model:数据模型,有的是固定写死的数据，但是大多数是来自服务器，从网络上请求下来的数据。</p><p>View:视图层,在前端开发中,通常指的是DOM层,主要就是给用户展示各种信息。</p><p>ViewModel:视图模型层,视图模型层是View和Model沟通的桥梁。一方面它实现了Data Binding ,也就是数据绑定，将Model的改变实时反应到View中；另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p><p>开发者只需要关注业务逻辑层，不需要手动操作DOM，不用担心数据状态的同步问题，复杂的数据状态维护完全由MVVM统一管理。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128131914280.png" alt="image-20210128131914280" style="zoom:50%;"><h3 id="三-Vue实现双向绑定的原理"><a href="#三-Vue实现双向绑定的原理" class="headerlink" title="三.Vue实现双向绑定的原理"></a>三.Vue实现双向绑定的原理</h3><p>vue数据双向绑定：采用数据劫持结合发布者-订阅者模式，通过Object,defineProperty() 来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通的javaScript对象传给Vue实例来作为它的data选项时，Vue将遍历它的属性，用Object.defineProperty将它们转为getter/setter。用户看不到getter/setter，但是在内部它们让Vue追踪依赖，在属性被访问和修改时通知变化。</p><p>vue的数据双向绑定将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中用来解析双大括号），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化-&gt;视图更新；视图交互变化（input）-&gt;数据model变更双向绑定效果。</p><p>vue中使用v-model指令来实现表单元素和数据的双向绑定。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{message}}  <span class="token comment" spellcheck="true">&lt;!-- Vue中使用v-model指令来实现表单元素和数据的双向绑定,v-model也可以用在textare中 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- v-model实质上也是一个语法糖,它的背后是包含两个操作  1.v-bind动态绑定value属性  2.v-on指令给当前元素绑定input事件,等同于下面的代码 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" :value='message' @input='message =$event.target.value'> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valueChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//创建Vue实例,得到 ViewModel</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">valueChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128152615412.png" alt="image-20210128152615412"></p><h3 id="四-Vue组件间的参数传递"><a href="#四-Vue组件间的参数传递" class="headerlink" title="四.Vue组件间的参数传递"></a>四.Vue组件间的参数传递</h3><p>1.父组件与子组件之间传值</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128155603703.png" alt="image-20210128155603703" style="zoom:50%;"><p>父传子：子组件通过props方法接收数据</p><p>子传父：$emit方法传递参数</p><p>2.非父子组件间传递数据，兄弟组件传值</p><p>eventBus,创建一个事件中心，用来传递事件和接收事件。也可以使用vuex</p><h3 id="五-Vue的路由实现：hash模式和history模式"><a href="#五-Vue的路由实现：hash模式和history模式" class="headerlink" title="五.Vue的路由实现：hash模式和history模式"></a>五.Vue的路由实现：hash模式和history模式</h3><p><strong>hash模式：</strong>在浏览器中符号“#”，以及#后面的字符称之为hash，用window.location.hash读取</p><p>特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。</p><p>hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 <a href="http://www.xxx.com/">http://www.xxx.com</a>，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。</p><p><strong>history模式：</strong>history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。<br>history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 <a href="http://www.xxx.com/items/id%E3%80%82%E5%90%8E%E7%AB%AF%E5%A6%82%E6%9E%9C%E7%BC%BA%E5%B0%91%E5%AF%B9">http://www.xxx.com/items/id。后端如果缺少对</a> /items/id 的路由处理，将返回 404 错误。<strong>Vue-Router 官网里如此描述：</strong>“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”</p><h3 id="六-Vue与Angular-以及React的区别？"><a href="#六-Vue与Angular-以及React的区别？" class="headerlink" title="六.Vue与Angular 以及React的区别？"></a>六.Vue与Angular 以及React的区别？</h3><p><strong>1.与AngularJS的区别</strong><br>相同点：<br>都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。</p><p>不同点：<br>AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。</p><p><strong>2.与React的区别</strong><br>相同点：<br>React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。<br>不同点：<br>React采用的Virtual DOM会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。</p><h3 id="七-Vue路由的钩子函数"><a href="#七-Vue路由的钩子函数" class="headerlink" title="七.Vue路由的钩子函数"></a>七.Vue路由的钩子函数</h3><p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</p><p><strong>beforeEach</strong>主要有3个参数to，from，next：</p><p><strong>to</strong>：route即将进入的目标路由对象，</p><p><strong>from</strong>：route当前导航正要离开的路由</p><p><strong>next</strong>：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</p><h3 id="八-Vuex的使用"><a href="#八-Vuex的使用" class="headerlink" title="八.Vuex的使用"></a>八.Vuex的使用</h3><p><strong>state</strong><br>Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。<br><strong>mutations</strong><br>mutations定义的方法动态修改Vuex 的 store 中的状态或数据。<br><strong>getters</strong><br>类似vue的计算属性，主要用来过滤一些数据。<br><strong>action</strong><br>actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。</p><p><strong>modules</strong><br>项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p><h3 id="九-vue-cli如何新增自定义指令"><a href="#九-vue-cli如何新增自定义指令" class="headerlink" title="九.vue-cli如何新增自定义指令"></a>九.vue-cli如何新增自定义指令</h3><p>1.创建局部指令</p><pre><code>var app = new Vue({    el: '#app',    data: {        },    // 创建指令(可以多个)    directives: {        // 指令名称        dir1: {            inserted(el) {                // 指令中第一个参数是当前使用指令的DOM                console.log(el);                console.log(arguments);                // 对DOM进行操作                el.style.width = '200px';                el.style.height = '200px';                el.style.background = '#000';            }        }    }})</code></pre><p>2.全局指令</p><pre><code>Vue.directive('dir2', {    inserted(el) {        console.log(el);    }})</code></pre><p>3.指令的使用</p><pre><code>&lt;div id="app"&gt;    &lt;div v-dir1&gt;&lt;/div&gt;    &lt;div v-dir2&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="十-vue自定义一个过滤器"><a href="#十-vue自定义一个过滤器" class="headerlink" title="十.vue自定义一个过滤器"></a>十.vue自定义一个过滤器</h3><p>html代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     {{msg| capitalize }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>JS代码：</p><pre><code>var vm=new Vue({    el:"#app",    data:{        msg:''    },    filters: {      capitalize: function (value) {        if (!value) return ''        value = value.toString()        return value.charAt(0).toUpperCase() + value.slice(1)      }    }})</code></pre><p>全局定义过滤器：</p><pre><code>Vue.filter('capitalize', function (value) {  if (!value) return ''  value = value.toString()  return value.charAt(0).toUpperCase() + value.slice(1)})</code></pre><p>过滤器接收表达式的值 (msg) 作为第一个参数。capitalize 过滤器将会收到 msg的值作为第一个参数。</p><h3 id="十一-对keep-alive的了解"><a href="#十一-对keep-alive的了解" class="headerlink" title="十一.对keep-alive的了解"></a>十一.对keep-alive的了解</h3><p><strong>keep-alive</strong>是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。<br>在vue 2.1.0 版本之后，keep-alive新加入了两个属性: include(包含的组件缓存) 与 exclude(排除的组件不缓存，优先级大于include) 。</p><p>使用方法</p><pre><code>&lt;keep-alive include='include_components' exclude='exclude_components'&gt;  &lt;component&gt;    &lt;!-- 该组件是否缓存取决于include和exclude属性 --&gt;  &lt;/component&gt;&lt;/keep-alive&gt;</code></pre><p>参数解释<br>include - 字符串或正则表达式，只有名称匹配的组件会被缓存<br>exclude - 字符串或正则表达式，任何名称匹配的组件都不会被缓存<br>include 和 exclude 的属性允许组件有条件地缓存。二者都可以用“，”分隔字符串、正则表达式、数组。当使用正则或者是数组时，要记得使用v-bind 。</p><p>使用示例</p><pre><code>&lt;!-- 逗号分隔字符串，只有组件a与b被缓存。 --&gt;&lt;keep-alive include="a,b"&gt;  &lt;component&gt;&lt;/component&gt;&lt;/keep-alive&gt;&lt;!-- 正则表达式 (需要使用 v-bind，符合匹配规则的都会被缓存) --&gt;&lt;keep-alive :include="/a|b/"&gt;  &lt;component&gt;&lt;/component&gt;&lt;/keep-alive&gt;&lt;!-- Array (需要使用 v-bind，被包含的都会被缓存) --&gt;&lt;keep-alive :include="['a', 'b']"&gt;  &lt;component&gt;&lt;/component&gt;&lt;/keep-alive&gt;</code></pre><h3 id="十二-简单问答"><a href="#十二-简单问答" class="headerlink" title="十二.简单问答"></a>十二.简单问答</h3><p><strong>1.css如何只在当前组件起作用</strong><br>答：在style标签中写入<strong>scoped</strong>即可 例如：<style scoped=""></style></p><p><strong>2.v-if 和 v-show 区别</strong><br>答：v-if按照条件是否渲染，v-show是display的block或none；</p><p><strong>3.<code>$route</code>和<code>$router</code>的区别</strong><br>答：<code>$route</code>是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而<code>$router</code>是“路由实例”对象包括了路由的跳转方法，钩子函数等。</p><p><strong>4.vue.js的两个核心是什么？</strong><br>答：数据驱动、组件系统</p><p><strong>5.vue几种常用的指令</strong><br>答：v-for 、 v-if 、v-bind、v-on、v-show、v-else</p><p><strong>6.vue常用的修饰符？</strong><br>答：.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；.capture: 事件侦听，事件发生的时候会调用</p><p><strong>7.v-on 可以绑定多个方法吗？</strong><br>答：可以</p><p><strong>8.vue中 key 值的作用？</strong><br>答：当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。key的作用主要是为了高效的更新虚拟DOM。</p><p><strong>9.什么是vue的计算属性？</strong><br>答：在模板中放入太多的逻辑会让模板过重且难以维护，在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。好处：①使得数据处理结构清晰；②依赖于数据，数据更新，处理结果自动更新；③计算属性内部this指向vm实例；④在template调用时，直接写计算属性名即可；⑤常用的是getter方法，获取数据，也可以使用set方法改变数据；⑥相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，不会重新计算。</p><p><strong>10.vue等单页面应用及其优缺点</strong><br>答：优点：Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件，核心是一个响应的数据绑定系统。MVVM、数据驱动、组件化、轻量、简洁、高效、快速、模块友好。<br>缺点：不支持低版本的浏览器，最低只支持到IE9；不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；第一次加载首页耗时相对长一些；不可以使用浏览器的导航按钮需要自行实现前进、后退。</p><p><strong>11.怎么定义 vue-router 的动态路由? 怎么获取传过来的值</strong><br>答：在 router 目录下的 index.js 文件中，对 path 属性加上 /:id，使用 router 对象的 params.id 获取。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css水平垂直居中</title>
      <link href="2021/012636538.html"/>
      <url>2021/012636538.html</url>
      
        <content type="html"><![CDATA[<h1 id="css水平居中-垂直居中总结"><a href="#css水平居中-垂直居中总结" class="headerlink" title="css水平居中+垂直居中总结"></a>css水平居中+垂直居中总结</h1><h3 id="一-水平居中"><a href="#一-水平居中" class="headerlink" title="一.水平居中"></a>一.水平居中</h3><h5 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1.行内元素"></a>1.行内元素</h5><p>text-align:center;运用在块级元素中,使其中包含的行内元素水平居中对齐</p><p>子元素是行内元素:看父元素是不是块级元素,如果是,直接给父元素设置</p><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>如果父元素不是块级元素,将父元素设置为块级元素,再水平居中</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h5 id="2-块级元素"><a href="#2-块级元素" class="headerlink" title="2.块级元素"></a>2.块级元素</h5><p>方法一:(分定宽度和不定宽度两种情况)</p><p>设定宽度时:需要谁居中,给谁加,使盒子自己居中</p><pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span></code></pre><p>子元素不定宽度时:默认子元素宽度和父元素一样,设置子元素为行内块/行内元素</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span></code></pre><p>同时给父元素设置</p><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>方法二:使用定位属性(不用管定不定宽度)</p><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>方法三:使用flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h3 id="二-垂直居中"><a href="#二-垂直居中" class="headerlink" title="二:垂直居中"></a>二:垂直居中</h3><h5 id="1-行内元素-1"><a href="#1-行内元素-1" class="headerlink" title="1.行内元素"></a>1.行内元素</h5><p>单行的行内元素:</p><p>只需要设置单行行内元素的”行高等于盒子的高”即可</p><p>line-height 和 height的值一样</p><p>多行的行内元素:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span></code></pre><h5 id="2-块级元素-1"><a href="#2-块级元素-1" class="headerlink" title="2.块级元素"></a>2.块级元素</h5><p>方法一:使用定位属性</p><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>方法二:使用flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>方法三:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">align-self</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h3 id="三-水平垂直居中"><a href="#三-水平垂直居中" class="headerlink" title="三.水平垂直居中"></a>三.水平垂直居中</h3><p>已知宽度和高度的元素:</p><p>方法一:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span></code></pre><p>方法二:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token function">-</span><span class="token punctuation">(</span>子元素宽度的一半<span class="token punctuation">)</span>px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token function">-</span><span class="token punctuation">(</span>子元素高度的一半<span class="token punctuation">)</span>px<span class="token punctuation">;</span></code></pre><p>未知高度和宽度的元素:</p><p>方法一:定位属性</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法二:flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Typora写博客</title>
      <link href="2021/012659448.html"/>
      <url>2021/012659448.html</url>
      
        <content type="html"><![CDATA[<p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。</p><h3 id="大纲-文件侧边栏"><a href="#大纲-文件侧边栏" class="headerlink" title="大纲/文件侧边栏"></a>大纲/文件侧边栏</h3><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲</p><p>快捷键是Ctrl + Shift + L</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><strong>加粗:Ctrl + B</strong></p><p><em>斜体: Ctrl + I</em></p><p><u>下划线: Ctrl + U</u></p><p><del>删除线:Alt+Shift+5</del></p><p>代码:Crtl + Shift + `</p><p><code>hello</code></p><p><a href="">插入链接:Ctrl + K</a></p><p>1-6级标题:Ctrl + 1-6,类推</p><p>插入表格Ctrl + T</p><p>插入图片:Ctrl + Shift + I</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/comment_bg.png"></p><h3 id="图片自动上传到图床"><a href="#图片自动上传到图床" class="headerlink" title="图片自动上传到图床"></a>图片自动上传到图床</h3><p>注意插入图片最好配置一下图片自动上传到图床</p><p><strong>问题说明</strong>：平常写博客或者做笔记等，都有要<strong>插入图片</strong>的时候，由于Typora 的图片只能保存在本地，变动一下文件的图片就会访问不到失效的问题，所以需要<strong>图床</strong>的存在。</p><p>图床工具使用<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>+码云</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126154922386.png" alt="image-20210126154922386"></p><p>在插件设置搜索gitee,下载插件。注:必须有node.js才能安装插件</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126155132694.png" alt="image-20210126155132694"></p><p>创建gitee码云图床库</p><p>必须开源,勾选Readme文件可以自动创建master分支</p><p>创建仓库之后配置PicGo,在Gitee图床填写相关信息</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126155753564.png" alt="image-20210126155753564"></p><p>token可在码云-&gt;设置-&gt;私人令牌生成</p><p>配置Typora,点击文件-&gt;偏好设置-&gt;图像</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210126160541622.png" alt="image-20210126160541622"></p><p>如果失败的话,错误信息是：Failed to fetch ,这种一般是由于端口设置错误造成的，看PicGo设置的Server,改成默认的端口36677,重新测试。</p><p>使用过程中，有可能因为打开了多个picgo程序，引发端口冲突，picgo自动帮你把36677端口改成了366771…，端口改回来picgo全部退出，重新上传即可，多看log文件</p><p>还有一种错误信息{“success”:false},这种错误是文件名冲突，上传了名称一样的图片，解决办法，picgo设置，打开时间戳重命名，再次上传即可</p><p>如果还有其他报错,可在PicGo设置查看日志文件</p><h3 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h3><p>可在视图中选择是否勾选使用</p><p>打字机模式会使你编辑的这一行处于正中心</p><p>专注模式除了你编辑的这一行其他全部变浅灰色</p><h3 id="emoji表情"><a href="#emoji表情" class="headerlink" title="emoji表情"></a>emoji表情</h3><p>在Typora中,可以使用:emoji:的形式打出表情进行选择</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>    <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>行内代码：用 `` 或 ```` 括起代码， 代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</p><p>代码块:输入```之后输入语言名,换行,开始写代码,Typora会实现代码高亮,日常的编程语言代码块都可以很好的支持,也可以右键,插入代码块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>右键插入表格,快捷键(Ctrl+T),输入行数和列数即可</p><table><thead><tr><th align="left">T1</th><th align="left">t2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">3</td><td align="left">5</td></tr><tr><td align="left">2</td><td align="left">hello</td><td align="left">拜拜</td></tr></tbody></table><h3 id="源代码模式和开发者工具"><a href="#源代码模式和开发者工具" class="headerlink" title="源代码模式和开发者工具"></a>源代码模式和开发者工具</h3><p>点击Typora左下角的&lt;/&gt;可切换源代码模式</p><p>快捷键Shift + F12可以切换开发者工具</p>]]></content>
      
      
      
        <tags>
            
            <tag> default </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html知识梳理</title>
      <link href="2021/012622236.html"/>
      <url>2021/012622236.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-html5有哪些新特性，移除了哪些元素？"><a href="#1-html5有哪些新特性，移除了哪些元素？" class="headerlink" title="1.html5有哪些新特性，移除了哪些元素？"></a>1.html5有哪些新特性，移除了哪些元素？</h3><p>html5现在已经不是SGML的子集，主要是关于图像，位置，存储，多任务等功能的增加</p><p>HTML5的新特性</p><p>1、语义化更好的标签： <code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code>等</p><p>2、绘画canvas</p><p>3、SVG绘图</p><p>4、视频和音频，用于媒介的video和audio元素</p><p>5、input增强型表单控件：<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></p><p>6、本地离线存储localStorage长期存储数据，浏览器关闭后数据不丢失；sessionStorage的数据在浏览器关闭后自动删除</p><p>7、新的技术<code>webworker</code>、<code> websocket</code>、 <code>Geolocation</code></p><p>移除的元素</p><p>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>font</code>、 <code>s</code>、<code>strike</code>、<code>tt</code>、<code>u</code></p><p>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></p><h3 id="2-前端注意哪些SEO？"><a href="#2-前端注意哪些SEO？" class="headerlink" title="2.前端注意哪些SEO？"></a>2.前端注意哪些SEO？</h3><ul><li><p>合理的title，description，keywords:搜索对这三项的权重逐个减小，title值强调重点即可，重要的关键词不要超过2次，而且要靠前，不同页面title要有所不同，description把页面的内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同，keywords列举重要关键词即可</p></li><li><p>语义化的HTML代码，符合W3C规范，语义化代码让搜索引擎更容易理解网页</p></li><li><p>重要内容HTML代码放在最前：搜索引擎抓取html的顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定被抓取</p></li><li><p>重要内容不要用js输出：爬虫不会执行js获取内容</p></li><li><p>少用iframe：搜索引擎不会抓取iframe中的内容</p></li><li><p>非装饰性图片必须加alt</p></li><li><p>提高网站速度：网站速度也是搜索引擎排序的一个重要指标</p></li></ul><h3 id="3-从浏览器地址栏输入url到显示页面的步骤"><a href="#3-从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="3.从浏览器地址栏输入url到显示页面的步骤"></a>3.从浏览器地址栏输入url到显示页面的步骤</h3><p>简单概括：</p><ul><li>浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（html，js，css，图像等）</li><li>浏览器对加载到的资源进行语法解析，建立相应的内部数据结构</li><li>载入解析到的资源文件，渲染页面</li></ul><p>详细说明：</p><p>从浏览器接收URL到开启网络请求线程（这一部分可以展开浏览器的机制及进程与线程之间的关系）</p><p>开启网络线程到发出一个完整的http请求（这一部分涉及dns查询，tcp/ip请求，五层因特网协议栈等知识）</p><p>从服务器接收到请求到对应后台接收到请求（这一部分涉及负载均衡，安全拦截以及后台内部处理等）</p><p>后台和前台的http交互（这一部分包括http头部，响应吗，报文结构，cookie等，可以提及静态资源的cookie优化，以及编码解码，如gzip压缩等）</p><p>单独拎出来的缓存问题，http缓存（这部分包括http缓存头部，Etag，catch-control等）</p><p>浏览器接收到http数据包后的解析流程（解析html词法分析然后解析成dom树，解析css生成css规则树，合并成render树，然后layout、painting渲染，复合图层的合成，GPU绘制，外链资源的处理，loaded和DOMContentLoaded等）</p><p>css的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC,IFC等概念）</p><p>JS引擎解析过程（JS解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等）</p><p>其他（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等内容）</p><h3 id="4-如何进行网站性能优化"><a href="#4-如何进行网站性能优化" class="headerlink" title="4.如何进行网站性能优化"></a>4.如何进行网站性能优化</h3><ul><li><p>content 方面</p><p>减少http请求：合并文件，css精灵，inline Image</p><p>减少DNS查询：DNS缓存、将资源分布到恰当数量的主机名</p><p>减少DOM元素数量</p></li><li><p>Cookie方面</p><p>减小cookie大小</p></li><li><p>Server 方面</p><p>使用CDN</p><p>配置ETag</p><p>对组件使用Gzip压缩</p></li><li><p>图片方面</p><p>优化图片：根据实际颜色需要选择色深，压缩</p><p>优化css精灵</p><p>不要在<code>HTML</code>中拉伸图片</p></li><li><p>css 方面</p><p>将样式表放到页面顶部</p><p>不使用css 表达式</p><p>使用<link>不使用@import</p></li><li><p>js 方面</p><p>将脚本放在页面底部</p><p>将javascript和css从外部引入</p><p>压缩javascript和css</p><p>删除不需要的脚本</p><p>减少DOM访问</p></li></ul><h3 id="5-语义化的理解"><a href="#5-语义化的理解" class="headerlink" title="5.语义化的理解"></a>5.语义化的理解</h3><p>简单来说就是用正确的标签做正确的事</p><p>HTML语义化就是让页面的内容结构化，便于对浏览器，搜索引擎的解析</p><p>在没有css的情况下也能以一种文档格式显示，并且是容易阅读的</p><p>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于SEO</p><p>使阅读源代码的人更容易将网站分块，便于阅读和理解</p><h3 id="6-对浏览器内核的理解"><a href="#6-对浏览器内核的理解" class="headerlink" title="6.对浏览器内核的理解"></a>6.对浏览器内核的理解</h3><p>主要分成两部分：渲染引擎（layout engineer或Rendering Engine）和JS引擎</p><ul><li>渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</li><li><code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</li><li>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</li></ul><h3 id="7-描述cookies-sessionStorage和localStorage的区别"><a href="#7-描述cookies-sessionStorage和localStorage的区别" class="headerlink" title="7.描述cookies,sessionStorage和localStorage的区别"></a>7.描述cookies,sessionStorage和localStorage的区别</h3><ul><li><p>cookie是网站为了标示用户身份而存储在用户本地终端（Client Side）上的数据（通常经过加密）</p></li><li><p>cookie数据始终在同源的http请求中携带（即使不需要），即会在浏览器和服务器之间来回传递</p></li><li><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p></li><li><p>存储大小</p><p>cookie数据大小不能超过4k</p><p>sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大</p></li><li><p>有效时间</p><p>localStorage存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</p><p>sessionStorage数据在当前浏览器窗口关闭后会自动删除</p><p>cookie在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p></li></ul><h3 id="8-页面访问cookie的限制条件"><a href="#8-页面访问cookie的限制条件" class="headerlink" title="8.页面访问cookie的限制条件"></a>8.页面访问cookie的限制条件</h3><p><strong>1.跨域问题：</strong></p><p>cookie允许Web开发者保留他们的用户的登录状态，但是当你的站点有一个以上的域名时就会有问题了</p><p>在cookie规范上说，一个cookie只能用于一个域名，不能够发给其他的域名。因此，如果在浏览器中对一个域名设置了cookie，这个cookie对于其他的域名将无效</p><p>解决：通过nginx反向代理</p><p>​            jsonp方式请求</p><p><strong>2.设置了HttpOnly：</strong></p><p>如果在cookie中设置了HttpOnly属性，那么通过程序(JS脚本、Applet等)将无法读取到cookie信息，这样能有效的防止<code>XSS</code>攻击。</p><h3 id="9-cookie的作用与弊端"><a href="#9-cookie的作用与弊端" class="headerlink" title="9.cookie的作用与弊端"></a>9.cookie的作用与弊端</h3><p><strong>cookie的作用</strong></p><ul><li>会话状态管理（如用户登录状态，购物车，游戏分数等需要记录的信息）可以在客户端上保存用户数据，起到简单的缓存和用户身份识别等作用。保存用户的登陆状态，用户进行登陆，成功登陆后，服务器生成特定的cookie返回给客户端，客户端下次访问该域名下的任何页面，将该cookie的信息发送给服务器，服务器经过检验，来判断用户是否登陆。</li><li>个性化设置（如用户自定义设置，主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><p><strong>cookie弊端</strong></p><ul><li>增加流量消耗，每次请求都需要带上cookie信息。</li><li>安全性隐患，cookie使用明文传输。如果cookie被人拦截了，那人就可以取得所有的session信息。</li><li>Cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉</li></ul><h3 id="10-介绍cookie的属性"><a href="#10-介绍cookie的属性" class="headerlink" title="10.介绍cookie的属性"></a>10.介绍cookie的属性</h3><p>在chrome控制台中的Application选项卡中可以看到cookie的信息</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210204130917729.png" alt="image-20210204130917729" style="zoom:80%;"><p>一个域名下面可能存在着很多个cookie对象，但一个cookie只能作用于一个域名，不能够发给其他的域名</p><ul><li><strong>Name</strong>  是一个cookie的名称</li><li><strong>Value</strong>   是一个cookie的值（用JavaScript操作cookie的时候注意对Value进行编码处理）</li><li><strong>Domain</strong>   是可以访问此cookie的域名</li></ul><p>注：二级域名能读取设置了<code>domain</code>为顶级域名或者自身的cookie，不能读取其他二级域名<code>domain</code>的<code>cookie</code>。所以要想<code>cookie</code>在多个二级域名中共享，需要设置<code>domain</code>为顶级域名，这样就可以在所有二级域名里面获得到这个<code>cookie</code>的值了。</p><p>顶级域名只能获取到<code>domain</code>设置为顶级域名的<code>cookie</code>，其他domain设置为二级域名的无法获取。</p><ul><li><p><strong>Path</strong>  是可以访问此cookie的页面路径，比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie。<code>domain</code>和<code>path</code>一起来限制 cookie 能被哪些 URL 访问。</p></li><li><p><strong>Expires</strong>   是cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是session，cookie和session会一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</p><p>当为<code>会话性 Cookie</code> 的时候，值保存在客户端内存中，并在用户关闭浏览器时失效。需要注意的是，有些浏览器提供了会话恢复功能，这种情况下即使关闭了浏览器，会话期 Cookie 也会被保留下来，就好像浏览器从来没有关闭一样。</p><p>与会话性 Cookie 相对的是<code>持久性 Cookie</code>，持久性 Cookies 会保存在用户的硬盘中，直至过期或者清除 Cookie。这里值得注意的是，设定的日期和时间只与客户端相关，而不是服务端。</p></li><li><p><strong>Max-Age</strong></p><p>用于设置在cookie失效之前需要经过的秒数</p><p><code>Max-Age</code> 可以为正数、负数、甚至是 0。</p><p>如果 max-Age 属性为<code>正数</code>时，浏览器会将其持久化，即写到对应的 Cookie 文件中。</p><p>当 max-Age 属性为<code>负数</code>，则表示该 Cookie 只是一个会话性 Cookie。</p><p>当 max-Age 为 <code>0 </code>时，则会立即删除这个 Cookie。</p><p>假如 <code>Expires </code>和 <code>Max-Age</code> 都存在，<code>Max-Age </code>优先级更高。</p></li><li><p><strong>Size</strong>  此cookie的大小</p></li><li><p><strong>HttpOnly</strong>  若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie</p></li><li><p><strong>Secure</strong></p><p>标记为Secure的cookie只能通过被https协议加密过的请求发送给服务端。使用https安全协议，可以保护cookie在浏览器和web服务期间的传输过程中不被窃取和篡改。</p></li><li><p><strong>SameSite</strong>  可以让cookie在<strong>跨站</strong>请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）</p><p> Chrome80 版本中默认屏蔽了第三方的 Cookie，这会导致阿里系的很多应用都产生问题，为此还专门成立了问题小组，推动各 BU 进行改造。</p><p>SameSite<strong>属性值</strong>：</p><ul><li><code>Strict</code>仅允许一方请求携带 Cookie，即浏览器将只发送<code>相同站点</code>请求的 Cookie，即当前网页 URL 与请求目标 <code>URL 完全一致</code>。</li><li><code>Lax</code>允许部分第三方请求携带 Cookie</li><li><code>None</code>无论是否<strong>跨站</strong>都会发送 Cookie</li></ul><p>之前默认是<code> None</code> 的，Chrome80 后默认是 <code>Lax</code>。</p><p><strong>跨站</strong></p><p>跨站和跨域是不同的。同站/跨站和第一方/第三方是等价的。但是浏览器的同源策略中的同源/跨域是完全不同的概念。</p><p>同源策略的同源是指两个URL的协议/主机名/端口一致。</p><p>例如：<code>https://www.taobao.com/pages/...</code>,它的协议是https，主机名是<code>www.taobao.com</code>,端口是<code>443</code></p><p>同源策略作为浏览器的安全基石，他的同源判断是比较严格的，相对而言，cookie中的同站判断就比较宽松：只要两个URL的eTLD+1相同即可，不需要考虑协议和端口。其中，eTLD表示有效顶级域名，注册于Mozilla维护的公共后缀列表（Public Suffix List）中，例如：<code>.com</code>,<code>.co.uk</code>,<code>.github.io</code>等，eTLD+1则表示有效顶级域名+二级域名，例如taobao.com等</p><p>举个栗子，<code>www.taobao.com</code>和<code>www.baidu.com</code>是跨站，<code>www.a.taobao.com</code>和<code>www.b.taobao.com</code>是同站，<code>a.github.io</code>和<code>b.github.io</code>是跨站（跨站哟）</p><p>从None改成Lax影响了某些地方Cookies的发送</p></li></ul><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/20210205102831.png" alt="2133762988-d56cfa55b282c615_articlex"></p><p>由图可以看出，对于大部分web应用而言，Post 表单，iframe，AJAX，Image 这四种情况从以前的跨站会发送三方 Cookie，变成了不发送。除了这些还有script的方式，这种方式也不会发送Cookie，像淘宝的大部分请求都是jsonp，如果涉及到跨站也可能会被影响。</p><p>可能会引发的问题</p><ul><li>天猫和飞猪的页面靠请求淘宝域名下的接口获取登录信息，由于 Cookie 丢失，用户无法登录，页面还会误判断成是由于用户开启了浏览器的“禁止第三方 Cookie”功能导致而给与错误的提示</li><li>淘宝部分页面内嵌支付宝确认付款和确认收货页面、天猫内嵌淘宝的登录页面等，由于 Cookie 失效，付款、登录等操作都会失败</li><li>阿里妈妈在各大网站比如今日头条，网易，微博等投放的广告，也是用 iframe 嵌入的，没有了 Cookie，就不能准确的进行推荐</li><li>一些埋点系统会把用户 id 信息埋到 Cookie 中，用于日志上报，这种系统一般走的都是单独的域名，与业务域名分开，所以也会受到影响。</li><li>一些用于防止恶意请求的系统，对判断为恶意请求的访问会弹出验证码让用户进行安全验证，通过安全验证后会在请求所在域种一个Cookie，请求中带上这个Cookie之后，短时间内不再弹安全验证码。在Chrome80以上如果因为Samesite的原因请求没办法带上这个Cookie，则会出现一直弹出验证码进行安全验证。</li><li>天猫商家后台请求了跨域的接口，因为没有 Cookie，接口不会返回数据</li><li>……</li></ul><p>解决办法：设置SameSite为None</p><h3 id="11-doctype的作用，严格模式与混杂模式如何区分？以及他们的意义"><a href="#11-doctype的作用，严格模式与混杂模式如何区分？以及他们的意义" class="headerlink" title="11.doctype的作用，严格模式与混杂模式如何区分？以及他们的意义"></a>11.doctype的作用，严格模式与混杂模式如何区分？以及他们的意义</h3><p>DOCTYPE是document type(文档类型)的缩写。&lt;!DOCTYPE&gt;声明位于文档的最前面，处于标签之前，它不是html标签。主要作用是告诉浏览器的解析器使用哪种HTML规范或者XHTML规范来解析页面。</p><p>严格模式和混杂模式都是浏览器的呈现模式，浏览器究竟使用混杂模式还是严格模式呈现页面与网页中的DTD（文件类型定义）有关，DTD里面包含了文档的规则。比如：loose.dtd</p><p>严格模式：又称标准模式，是指浏览器按照W3C标准来解析代码，呈现页面</p><p>混杂模式：又称为怪异模式或兼容模式，是指浏览器按照自己的方式来解析代码，使用一种比较宽松的向后兼容的方式来显示页面。</p><h3 id="12-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt"><a href="#12-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt" class="headerlink" title="12.HTML5为什么只需要写< !DOCTYPE HTML> ?"></a>12.HTML5为什么只需要写&lt; !DOCTYPE HTML&gt; ?</h3><p>html5不基于SGML(标准通用标记语言)，因此不需要对DTD（DTD规定了标记语言的规则，这样浏览器才能正确的呈现内容）进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照他们应该的方式来运行）而HTML4.01基于SGML，需要对DTD进行引用，才能告知浏览器文档所使用的文档类型</p><h3 id="13-WEB标准以及W3C标准是什么"><a href="#13-WEB标准以及W3C标准是什么" class="headerlink" title="13.WEB标准以及W3C标准是什么"></a>13.WEB标准以及W3C标准是什么</h3><p>标签闭合，标签小写，不乱嵌套，使用外链css和js,结构行为表现的分离</p><h3 id="14-行内元素有哪些？块级元素有哪些？空（void）元素有哪些"><a href="#14-行内元素有哪些？块级元素有哪些？空（void）元素有哪些" class="headerlink" title="14.行内元素有哪些？块级元素有哪些？空（void）元素有哪些"></a>14.行内元素有哪些？块级元素有哪些？空（void）元素有哪些</h3><p>行内元素（不可以设置宽高，不会独占一行）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a<span class="token operator">></span>、<span class="token operator">&lt;</span>abbr<span class="token operator">></span>、<span class="token operator">&lt;</span>acronym<span class="token operator">></span>、<span class="token operator">&lt;</span>b<span class="token operator">></span>、<span class="token operator">&lt;</span>bdo<span class="token operator">></span>、<span class="token operator">&lt;</span>big<span class="token operator">></span>、<span class="token operator">&lt;</span>br<span class="token operator">></span>、<span class="token operator">&lt;</span>cite<span class="token operator">></span>、<span class="token operator">&lt;</span>code<span class="token operator">></span>、<span class="token operator">&lt;</span>dfn<span class="token operator">></span>、<span class="token operator">&lt;</span>em<span class="token operator">></span>、<span class="token operator">&lt;</span>i<span class="token operator">></span>、<span class="token operator">&lt;</span>img<span class="token operator">></span>、<span class="token operator">&lt;</span>input<span class="token operator">></span>、<span class="token operator">&lt;</span>kbd<span class="token operator">></span>、<span class="token operator">&lt;</span>label<span class="token operator">></span>、<span class="token operator">&lt;</span>q<span class="token operator">></span>、<span class="token operator">&lt;</span>samp<span class="token operator">></span>、<span class="token operator">&lt;</span>select<span class="token operator">></span>、<span class="token operator">&lt;</span>small<span class="token operator">></span>、<span class="token operator">&lt;</span>span<span class="token operator">></span>、<span class="token operator">&lt;</span>strong<span class="token operator">></span>、<span class="token operator">&lt;</span>sub<span class="token operator">></span>、<span class="token operator">&lt;</span>sup<span class="token operator">></span>、<span class="token operator">&lt;</span>textarea<span class="token operator">></span>、<span class="token operator">&lt;</span>tt<span class="token operator">></span>、<span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token operator">></span></code></pre><p>块级元素（可以设置宽高，独占一行）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>address<span class="token operator">></span>、<span class="token operator">&lt;</span>caption<span class="token operator">></span>、<span class="token operator">&lt;</span>dd<span class="token operator">></span>、<span class="token operator">&lt;</span>div<span class="token operator">></span>、<span class="token operator">&lt;</span>dl<span class="token operator">></span>、<span class="token operator">&lt;</span>dt<span class="token operator">></span>、<span class="token operator">&lt;</span>fieldset<span class="token operator">></span>、<span class="token operator">&lt;</span>form<span class="token operator">></span>、<span class="token operator">&lt;</span>h1<span class="token operator">></span>、<span class="token operator">&lt;</span>h2<span class="token operator">></span>、<span class="token operator">&lt;</span>h3<span class="token operator">></span>、<span class="token operator">&lt;</span>h4<span class="token operator">></span>、<span class="token operator">&lt;</span>h5<span class="token operator">></span>、<span class="token operator">&lt;</span>h6<span class="token operator">></span>、<span class="token operator">&lt;</span>hr<span class="token operator">></span>、<span class="token operator">&lt;</span>legend<span class="token operator">></span>、<span class="token operator">&lt;</span>li<span class="token operator">></span>、<span class="token operator">&lt;</span>noframes<span class="token operator">></span>、<span class="token operator">&lt;</span>noscript<span class="token operator">></span>、<span class="token operator">&lt;</span>ol<span class="token operator">></span>、<span class="token operator">&lt;</span>ul<span class="token operator">></span>、<span class="token operator">&lt;</span>p<span class="token operator">></span>、<span class="token operator">&lt;</span>pre<span class="token operator">></span>、<span class="token operator">&lt;</span>table<span class="token operator">></span>、<span class="token operator">&lt;</span>tbody<span class="token operator">></span>、<span class="token operator">&lt;</span>td<span class="token operator">></span>、<span class="token operator">&lt;</span>tfoot<span class="token operator">></span>、<span class="token operator">&lt;</span>th<span class="token operator">></span>、<span class="token operator">&lt;</span>thead<span class="token operator">></span>、<span class="token operator">&lt;</span>tr<span class="token operator">></span></code></pre><p>空（void）：</p><p>常见的</p><pre><code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></pre><p>不常见的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>area<span class="token operator">></span> <span class="token operator">&lt;</span>base<span class="token operator">></span> <span class="token operator">&lt;</span>col<span class="token operator">></span> <span class="token operator">&lt;</span>command<span class="token operator">></span> <span class="token operator">&lt;</span>embed<span class="token operator">></span> <span class="token operator">&lt;</span>link<span class="token operator">></span> <span class="token operator">&lt;</span>meta<span class="token operator">></span><span class="token operator">&lt;</span>keygen<span class="token operator">></span> <span class="token operator">&lt;</span>param<span class="token operator">></span> <span class="token operator">&lt;</span>source<span class="token operator">></span> <span class="token operator">&lt;</span>track<span class="token operator">></span> <span class="token operator">&lt;</span>wbr<span class="token operator">></span></code></pre><h3 id="15-xhtml和html的区别"><a href="#15-xhtml和html的区别" class="headerlink" title="15.xhtml和html的区别"></a>15.xhtml和html的区别</h3><p>功能上的区别</p><p>主要是XHTML可兼容各大浏览器，手机以及PDA（掌上电脑），并且浏览器也能快速正确的编译网页</p><p>书写习惯的差别</p><p>XHTML元素必须被正确的嵌套，闭合，区分大小写，文档必须拥有根元素</p><h3 id="16-iframe有哪些缺点"><a href="#16-iframe有哪些缺点" class="headerlink" title="16.iframe有哪些缺点"></a>16.iframe有哪些缺点</h3><ul><li><p>iframe会阻塞主页面的Onload事件</p></li><li><p>搜索引擎的检索程序无法解读这种页面，不利于SEO</p><p>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行下载</p></li><li><p>使用iframe之前需要考虑这两个缺点，如果需要使用iframe，最好是通过JavaScript动态给iframe添加src属性值，这样可以绕开这两个问题</p></li></ul><h3 id="17-网页验证码的作用，是为了解决什么安全问题"><a href="#17-网页验证码的作用，是为了解决什么安全问题" class="headerlink" title="17.网页验证码的作用，是为了解决什么安全问题"></a>17.网页验证码的作用，是为了解决什么安全问题</h3><p>区分用户是计算机还是人的公共全自动程序，可以防止恶意破解密码，刷票，论坛灌水</p><p>有效防止黑客对某一特定注册用户用特定程序暴力破解方式进行不断登录尝试</p><h3 id="18-title和h1的区别，b与strong的区别，i与em的区别"><a href="#18-title和h1的区别，b与strong的区别，i与em的区别" class="headerlink" title="18.title和h1的区别，b与strong的区别，i与em的区别"></a>18.title和h1的区别，b与strong的区别，i与em的区别</h3><p><code>title</code>属性没有明确的意义，只是表示标题，<code>h1</code>表示层次明确的标题，对页面信息的抓取也有很大影响</p><p><code>strong</code>是标明重点内容，有语气加强的含义，使用阅读设备阅读时，<code>&lt;strong&gt;</code>会重读，而<code>&lt;b&gt;</code>是展示强调内容。</p><p><code>i</code>内容展示为斜体，<code>em</code>表示强调的文本。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/012216107.html"/>
      <url>2021/012216107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
