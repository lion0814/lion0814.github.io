<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue组件之间的数据传递</title>
      <link href="2021/012858601.html"/>
      <url>2021/012858601.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件之间的数据传递"><a href="#Vue组件之间的数据传递" class="headerlink" title="Vue组件之间的数据传递"></a>Vue组件之间的数据传递</h1><p>Vue 的组件作用域都是孤立的，不允许在子组件的模板内直接引用父组件的数据。必须使用特定的方法才能实现组件之间的数据传递。</p><p>组件中的数据存放在data属性或methods等属性里，注意组件中的data必须是一个函数，返回一个对象，对象内部保存数据。</p><p>至于为什么在组件中必须是一个函数，因为Vue让每个组件对象都返回一个新的对象，如果是同一个对象，组件在多次使用时会相互影响。</p><p>首先用 vue-cli 创建一个项目，其中 App.vue 是父组件，components 文件夹下Child.vue是子组件。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128172031366.png" alt="image-20210128172031366" style="zoom:80%;"><h3 id="一-父组件传给子组件：子组件通过props方法接收数据"><a href="#一-父组件传给子组件：子组件通过props方法接收数据" class="headerlink" title="一.父组件传给子组件：子组件通过props方法接收数据"></a>一.父组件传给子组件：子组件通过props方法接收数据</h3><p>父组件App.vue代码如下：</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <h2>{{ title }}</h2>    <!-- 让子组件绑定appMessage变量，不加:的话，message会被当成字符串 -->    <child :appMessage="message"></child>  </div></template><script>import Child from './components/Child.vue'    //引入子组件export default {  name: 'App',  data() {    return {      title: '父组件',      message: 'child组件你好，我是你爸爸'    }  },  components: {    Child  }}</script><style></style></code></pre><p>子组件Child.vue代码如下：</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="child">    <p>{{ title }}</p>    <p>子组件接收到父组件消息：{{ appMessage }}</p>  </div></template>  <script>  export default {    name: "Child",    data(){      return {        title:'子组件',      }    },    //从App.vue接收appMessage    props:['appMessage']  }</script><style scoped></style></code></pre><p>运行结果：</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128173307922.png" alt="image-20210128173307922" style="zoom:80%;"><h3 id="二-子组件向父组件传值：通过绑定自定义事件传值"><a href="#二-子组件向父组件传值：通过绑定自定义事件传值" class="headerlink" title="二.子组件向父组件传值：通过绑定自定义事件传值"></a>二.子组件向父组件传值：通过绑定自定义事件传值</h3><p>自定义事件的流程：</p><p>在子组件中，通过$emit()来触发事件。</p><p>在父组件中，通过v-on来监听子组件事件。</p><p>子组件代码：</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="child">    <p>{{ title }}</p>    <!-- 添加点击事件，点击之后将sonMessage传给父组件 -->    <button @click="setUser">传值</button>  </div></template>  <script>  export default {    name: "Child",    data(){      return {        title:'子组件',        sonMessage:'爸爸，我是儿子蛋蛋'      }    },    methods: {      setUser() {        // 通过$emit发射事件        this.$emit('transfer',this.sonMessage)      }    }  }</script><style scoped></style></code></pre><p>父组件代码：</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <h2>{{title}}</h2>    <p>父组件接收到的内容：{{ message }}</p>    <!-- 绑定自定义事件transfer -->    <child @transfer="getUser"></child>  </div></template><script>import Child from './components/Child.vue'export default {  name: 'App',  data() {    return {      title: '父组件',      message:''    }  },  components: {    Child  },  methods: {    getUser(msg) {      this.message = msg    }  }}</script><style></style></code></pre><p>运行结果：点击按钮之后</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128180902163.png" alt="image-20210128180902163" style="zoom:80%;"><h3 id="三-通过Vuex状态管理传值"><a href="#三-通过Vuex状态管理传值" class="headerlink" title="三.通过Vuex状态管理传值"></a>三.通过Vuex状态管理传值</h3><p>Vuex 是一个可以在多个组件间共享状态的插件，一般在比较大型的项目中使用</p><p>需要npm install vuex –save 安装vuex</p><p>创建store文件夹，在其中创建index.js文件</p><p>在main.js中挂载</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128190510021.png" alt="image-20210128190510021"></p><p>可以实现一个简单的计数器案例</p><p>index.js中写如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">--</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>在App.vue中使用store对象中保存的状态即可<br>通过this.$store.state.属性的方式来访问状态<br>通过this.$store.commit(‘mutation中方法’)来修改状态</p><pre class=" language-vue"><code class="language-vue"><template>  <div id="app">    <p>{{count}}</p>    <button @click="increment"></button>    <button @click="decrement"></button>  </div></template><script>export default {  name: 'App',  computed: {    count: function() {      return this.$store.state.count    }  },  methods: {    increment() {      this.$store.commit('increment')    },    decrement() {      this.$store.commit('decrement')    }  }}</script><style></style></code></pre><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128200645833.png" alt="image-20210128200645833" style="zoom:80%;">点击加号减号可以修改count的值</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点</title>
      <link href="2021/012858568.html"/>
      <url>2021/012858568.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于Vue-js基础知识点整理"><a href="#关于Vue-js基础知识点整理" class="headerlink" title="关于Vue.js基础知识点整理"></a>关于Vue.js基础知识点整理</h1><p>vue是一个渐进式的框架，渐进式意味着可以将vue当成你应用的一部分嵌入其中，带来更丰富的交互体验，vue的核心库及其生态可以实现更多的业务逻辑。</p><h3 id="一-Vue的生命周期"><a href="#一-Vue的生命周期" class="headerlink" title="一.Vue的生命周期"></a>一.Vue的生命周期</h3><p>Vue实例有一个完整的生命周期，从开始创建、初始化数据、编译模板、挂载DOM→渲染、更新→渲染、销毁等一系列过程，这个过程就是Vue的生命周期。简单来说，就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>vue生命周期一共有八个阶段：创建前/后，载入前/后，更新前/后和销毁前/后</p><p><strong>beforeCreate</strong>（创建前） 在数据观测和初始化事件还未开始<br><strong>created</strong>（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来<br><strong>beforeMount</strong>（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。<br><strong>mounted</strong>（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。<br><strong>beforeUpdate</strong>（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。<br><strong>updated</strong>（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。<br><strong>beforeDestroy</strong>（销毁前） 在实例销毁之前调用。实例仍然完全可用。<br><strong>destroyed</strong>（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vue生命周期"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aaa</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aaa</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>destroy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>msg:{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//生命周期：初始化阶段 运行中阶段 销毁阶段</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span><span class="token string">"#aaa"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>msg<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        timer<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            destroy<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeCreate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeCreate:刚刚new Vue()之后，这个时候，数据还没有挂载呢，只是一个空壳'</span><span class="token punctuation">)</span>                       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        created<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'created:这个时候已经可以使用到数据，也可以更改数据,在这里更改数据不会触发updated函数'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token operator">=</span><span class="token string">' world'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接下来开始找实例或者组件对应的模板，编译模板为虚拟dom放入到render函数中准备渲染'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeMount<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeMount：虚拟dom已经创建完成，马上就要渲染,在这里也可以更改数据，不会触发updated'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'哈哈哈哈'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//undefined</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接下来开始render，渲染出真实dom'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// render:function(createElement){</span>        <span class="token comment" spellcheck="true">//     console.log('render')</span>        <span class="token comment" spellcheck="true">//     return createElement('div','hahaha')</span>        <span class="token comment" spellcheck="true">// },</span>        mounted<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mounted：此时，组件已经出现在页面中，数据、真实dom都已经处理好了,事件都已经挂载好了'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"myp"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以在这里操作真实dom等事情...'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//    this.$options.timer = setInterval(function () {</span>        <span class="token comment" spellcheck="true">//        console.log('setInterval')</span>        <span class="token comment" spellcheck="true">//         this.msg+='!'  </span>        <span class="token comment" spellcheck="true">//    }.bind(this),500)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeUpdate<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里不能更改数据，否则会陷入死循环</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeUpdate:重新渲染之前触发'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染'</span><span class="token punctuation">)</span>                 <span class="token punctuation">}</span><span class="token punctuation">,</span>        updated<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里不能更改数据，否则会陷入死循环</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'updated:数据已经更改完成，dom也重新render完成'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        beforeDestroy<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeDestory:销毁前执行（$destroy方法被调用的时候就会执行）,一般在这里善后:清除计时器、清除非指令绑定的事件等等...'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// clearInterval(this.$options.timer)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        destroyed<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'destroyed:组件的数据绑定、监听...都去掉了,只剩下dom空壳，这里也可以善后'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>问：第一次页面加载会触发哪几个钩子？</p><p>答：会触发beforeCreate, created, beforeMount, mounted 。</p><p>问：DOM渲染在哪个周期中就已经完成了？</p><p>答：在mounted中已经完成</p><h3 id="二-对MVVM的理解"><a href="#二-对MVVM的理解" class="headerlink" title="二.对MVVM的理解"></a>二.对MVVM的理解</h3><p>MVVM是Model-View-ViewModel的缩写</p><p>Model:数据模型,有的是固定写死的数据，但是大多数是来自服务器，从网络上请求下来的数据。</p><p>View:视图层,在前端开发中,通常指的是DOM层,主要就是给用户展示各种信息。</p><p>ViewModel:视图模型层,视图模型层是View和Model沟通的桥梁。一方面它实现了Data Binding ,也就是数据绑定，将Model的改变实时反应到View中；另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件（点击、滚动、touch等）时，可以监听到，并在需要的情况下改变对应的Data。</p><p>开发者只需要关注业务逻辑层，不需要手动操作DOM，不用担心数据状态的同步问题，复杂的数据状态维护完全由MVVM统一管理。</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128131914280.png" alt="image-20210128131914280" style="zoom:50%;"><h3 id="三-Vue实现双向绑定的原理"><a href="#三-Vue实现双向绑定的原理" class="headerlink" title="三.Vue实现双向绑定的原理"></a>三.Vue实现双向绑定的原理</h3><p>vue数据双向绑定：采用数据劫持结合发布者-订阅者模式，通过Object,defineProperty() 来劫持各个属性的setter,getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通的javaScript对象传给Vue实例来作为它的data选项时，Vue将遍历它的属性，用Object.defineProperty将它们转为getter/setter。用户看不到getter/setter，但是在内部它们让Vue追踪依赖，在属性被访问和修改时通知变化。</p><p>vue的数据双向绑定将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中用来解析双大括号），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化-&gt;视图更新；视图交互变化（input）-&gt;数据model变更双向绑定效果。</p><p>vue中使用v-model指令来实现表单元素和数据的双向绑定。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{message}}  <span class="token comment" spellcheck="true">&lt;!-- Vue中使用v-model指令来实现表单元素和数据的双向绑定,v-model也可以用在textare中 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- v-model实质上也是一个语法糖,它的背后是包含两个操作  1.v-bind动态绑定value属性  2.v-on指令给当前元素绑定input事件,等同于下面的代码 --></span>  <span class="token comment" spellcheck="true">&lt;!-- &lt;input type="text" :value='message' @input='message =$event.target.value'> --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valueChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">//创建Vue实例,得到 ViewModel</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">valueChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128152615412.png" alt="image-20210128152615412"></p><h3 id="四-Vue组件间的参数传递"><a href="#四-Vue组件间的参数传递" class="headerlink" title="四.Vue组件间的参数传递"></a>四.Vue组件间的参数传递</h3><p>1.父组件与子组件之间传值</p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210128155603703.png" alt="image-20210128155603703" style="zoom:50%;"><p>父传子：子组件通过props方法接收数据</p><p>子传父：$emit方法传递参数</p><p>2.非父子组件间传递数据，兄弟组件传值</p><p>eventBus,创建一个事件中心，用来传递事件和接收事件。也可以使用vuex</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css水平垂直居中</title>
      <link href="2021/012636538.html"/>
      <url>2021/012636538.html</url>
      
        <content type="html"><![CDATA[<h1 id="css水平居中-垂直居中总结"><a href="#css水平居中-垂直居中总结" class="headerlink" title="css水平居中+垂直居中总结"></a>css水平居中+垂直居中总结</h1><h3 id="一-水平居中"><a href="#一-水平居中" class="headerlink" title="一.水平居中"></a>一.水平居中</h3><h5 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1.行内元素"></a>1.行内元素</h5><p>text-align:center;运用在块级元素中,使其中包含的行内元素水平居中对齐</p><p>子元素是行内元素:看父元素是不是块级元素,如果是,直接给父元素设置</p><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>如果父元素不是块级元素,将父元素设置为块级元素,再水平居中</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h5 id="2-块级元素"><a href="#2-块级元素" class="headerlink" title="2.块级元素"></a>2.块级元素</h5><p>方法一:(分定宽度和不定宽度两种情况)</p><p>设定宽度时:需要谁居中,给谁加,使盒子自己居中</p><pre class=" language-css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span></code></pre><p>子元素不定宽度时:默认子元素宽度和父元素一样,设置子元素为行内块/行内元素</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline<span class="token punctuation">;</span></code></pre><p>同时给父元素设置</p><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>方法二:使用定位属性(不用管定不定宽度)</p><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>方法三:使用flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h3 id="二-垂直居中"><a href="#二-垂直居中" class="headerlink" title="二:垂直居中"></a>二:垂直居中</h3><h5 id="1-行内元素-1"><a href="#1-行内元素-1" class="headerlink" title="1.行内元素"></a>1.行内元素</h5><p>单行的行内元素:</p><p>只需要设置单行行内元素的”行高等于盒子的高”即可</p><p>line-height 和 height的值一样</p><p>多行的行内元素:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span></code></pre><h5 id="2-块级元素-1"><a href="#2-块级元素-1" class="headerlink" title="2.块级元素"></a>2.块级元素</h5><p>方法一:使用定位属性</p><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>方法二:使用flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><p>方法三:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">align-self</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre><h3 id="三-水平垂直居中"><a href="#三-水平垂直居中" class="headerlink" title="三.水平垂直居中"></a>三.水平垂直居中</h3><p>已知宽度和高度的元素:</p><p>方法一:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span></code></pre><p>方法二:</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token function">-</span><span class="token punctuation">(</span>子元素宽度的一半<span class="token punctuation">)</span>px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token function">-</span><span class="token punctuation">(</span>子元素高度的一半<span class="token punctuation">)</span>px<span class="token punctuation">;</span></code></pre><p>未知高度和宽度的元素:</p><p>方法一:定位属性</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span></code></pre><p>子元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方法二:flex布局</p><p>父元素:</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Typora写博客</title>
      <link href="2021/012659448.html"/>
      <url>2021/012659448.html</url>
      
        <content type="html"><![CDATA[<p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。</p><h3 id="大纲-文件侧边栏"><a href="#大纲-文件侧边栏" class="headerlink" title="大纲/文件侧边栏"></a>大纲/文件侧边栏</h3><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲</p><p>快捷键是Ctrl + Shift + L</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p><strong>加粗:Ctrl + B</strong></p><p><em>斜体: Ctrl + I</em></p><p><u>下划线: Ctrl + U</u></p><p><del>删除线:Alt+Shift+5</del></p><p>代码:Crtl + Shift + `</p><p><code>hello</code></p><p><a href="">插入链接:Ctrl + K</a></p><p>1-6级标题:Ctrl + 1-6,类推</p><p>插入表格Ctrl + T</p><p>插入图片:Ctrl + Shift + I</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/comment_bg.png"></p><h3 id="图片自动上传到图床"><a href="#图片自动上传到图床" class="headerlink" title="图片自动上传到图床"></a>图片自动上传到图床</h3><p>注意插入图片最好配置一下图片自动上传到图床</p><p><strong>问题说明</strong>：平常写博客或者做笔记等，都有要<strong>插入图片</strong>的时候，由于Typora 的图片只能保存在本地，变动一下文件的图片就会访问不到失效的问题，所以需要<strong>图床</strong>的存在。</p><p>图床工具使用<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>+码云</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126154922386.png" alt="image-20210126154922386"></p><p>在插件设置搜索gitee,下载插件。注:必须有node.js才能安装插件</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126155132694.png" alt="image-20210126155132694"></p><p>创建gitee码云图床库</p><p>必须开源,勾选Readme文件可以自动创建master分支</p><p>创建仓库之后配置PicGo,在Gitee图床填写相关信息</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/image-20210126155753564.png" alt="image-20210126155753564"></p><p>token可在码云-&gt;设置-&gt;私人令牌生成</p><p>配置Typora,点击文件-&gt;偏好设置-&gt;图像</p><p><img src="https://gitee.com/lion0814/picgo/raw/master/img/image-20210126160541622.png" alt="image-20210126160541622"></p><p>如果失败的话,看PicGo设置的Server,改成默认的端口36677,重新测试</p><p>如果还有其他报错,可在PicGo设置查看日志文件</p><h3 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h3><p>可在视图中选择是否勾选使用</p><p>打字机模式会使你编辑的这一行处于正中心</p><p>专注模式除了你编辑的这一行其他全部变浅灰色</p><h3 id="emoji表情"><a href="#emoji表情" class="headerlink" title="emoji表情"></a>emoji表情</h3><p>在Typora中,可以使用:emoji:的形式打出表情进行选择</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>    <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>行内代码：用 `` 或 ```` 括起代码， 代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</p><p>代码块:输入```之后输入语言名,换行,开始写代码,Typora会实现代码高亮,日常的编程语言代码块都可以很好的支持,也可以右键,插入代码块</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>右键插入表格,快捷键(Ctrl+T),输入行数和列数即可</p><table><thead><tr><th align="left">T1</th><th align="left">t2</th><th align="left">T3</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">3</td><td align="left">5</td></tr><tr><td align="left">2</td><td align="left">hello</td><td align="left">拜拜</td></tr></tbody></table><h3 id="源代码模式和开发者工具"><a href="#源代码模式和开发者工具" class="headerlink" title="源代码模式和开发者工具"></a>源代码模式和开发者工具</h3><p>点击Typora左下角的&lt;/&gt;可切换源代码模式</p><p>快捷键Shift + F12可以切换开发者工具</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>one</title>
      <link href="2021/012622236.html"/>
      <url>2021/012622236.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/012216107.html"/>
      <url>2021/012216107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
